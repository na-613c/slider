{"version":3,"sources":["images/ArrowLeft.svg","images/ArrowRight.svg","components/slider/sliderItem/SliderItem.module.css","components/slider/Slider.jsx","components/exampleElement/Square.jsx","components/slider/sliderItem/SliderItem.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Slider","React","memo","startX","infinite","startPosition","children","initState","currentPosition","length","useState","state","setState","error","setError","inputPosition","setInputPosition","showLeft","showRight","useEffect","prev","moveLeft","change","newPosition","isMoveLeft","leftSlide","rightSlide","className","onClick","onTouchStart","e","changedTouches","pageX","onTouchEnd","distance","src","arrowLeft","alt","type","name","placeholder","onChange","target","value","arrowRight","style","color","display","width","height","background","verticalAlign","minHeight","Square","id","SliderItem","s","slideItem","App","setValue","squares","map","i","key","margin","checked","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9e2223db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ArrowLeft.e1c5226f.svg\";","module.exports = __webpack_public_path__ + \"static/media/ArrowRight.d86e91f6.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slideItem\":\"SliderItem_slideItem__3k9nB\"};","import React, {useEffect, useState} from 'react';\r\nimport arrowLeft from '../../images/ArrowLeft.svg'\r\nimport arrowRight from '../../images/ArrowRight.svg'\r\nimport './Slider.css'\r\n\r\nconst Slider = React.memo(({infinite = true, startPosition = 0, children}) => {\r\n\r\n    let startX, endX;\r\n\r\n\r\n    const initState = {\r\n        currentPosition: startPosition,\r\n        length: 0\r\n    };\r\n\r\n    const [state, setState] = useState(initState);\r\n    const [error, setError] = useState('');\r\n    const [inputPosition, setInputPosition] = useState(0);\r\n\r\n    let showLeft = !(!infinite && state.currentPosition === 0);\r\n    let showRight = !(!infinite && state.currentPosition === state.length - 1);\r\n\r\n    useEffect(() => setState(prev => ({...prev, length: children.length})), []);\r\n\r\n    const onTouchStart = (e) => {\r\n        startX = e.changedTouches[0].pageX;\r\n    };\r\n\r\n    const onTouchEnd = (e) => {\r\n        endX = e.changedTouches[0].pageX;\r\n        const distance = endX - startX;\r\n        if (distance === 0) return null;\r\n\r\n        const isMoveLeft = moveLeft(distance);\r\n\r\n\r\n        if (((showLeft === false) && (isMoveLeft === false))\r\n            || ((showRight === false) && (isMoveLeft === true))) return setState(prev => ({...prev}));\r\n\r\n\r\n        setState(prev => ({\r\n            ...prev,\r\n            currentPosition: newPosition(isMoveLeft, prev)\r\n        }));\r\n    };\r\n\r\n    const moveLeft = (change) => change < 0;\r\n\r\n    const newPosition = (isMoveLeft, state) => {\r\n        let newPosition = state.currentPosition + (isMoveLeft ? 1 : -1);\r\n\r\n        if (infinite) {\r\n            if (newPosition < 0) newPosition = state.length - 1;\r\n            if (newPosition > state.length - 1) newPosition = 0;\r\n        }\r\n\r\n        return newPosition\r\n    };\r\n\r\n    const setPosition = () => {\r\n        if (0 > (inputPosition - 1)) return setError('отрицательное значение номера слайда ');\r\n        else if ((inputPosition - 1) > state.length) return setError('номер слайда превышает количество слайдов');\r\n        else setError('');\r\n        return setState(prev => ({...prev, currentPosition: inputPosition - 1}))\r\n    };\r\n\r\n    const leftSlide = () => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            currentPosition: newPosition(false, prev)\r\n        }));\r\n    };\r\n\r\n    const rightSlide = () => {\r\n        setState(prev => ({\r\n            ...prev,\r\n            currentPosition: newPosition(true, prev)\r\n        }));\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={'slider'}>\r\n            <div className={'slide'}>\r\n\r\n                {showLeft &&\r\n                <div className={'additionalFirst'} onClick={leftSlide}>\r\n                    {children[newPosition(false, state)]}\r\n                </div>}\r\n\r\n                <div className={'main'} onTouchStart={onTouchStart} onTouchEnd={onTouchEnd}>\r\n                    {children[state.currentPosition]}\r\n                </div>\r\n\r\n                {showRight &&\r\n                <div className={'additionalSecond'} onClick={rightSlide}>\r\n                    {children[newPosition(true, state)]}\r\n                </div>}\r\n\r\n            </div>\r\n            <div className={'controlPanel'}>\r\n                {showLeft &&\r\n                <img src={arrowLeft} alt=\"\" className={'buttonLeft'} onClick={leftSlide}/>\r\n                }\r\n                <div className={'inputField'}>\r\n                    <input className={'input'} type=\"number\" name='position' placeholder={'Номер слайда'}\r\n                           onChange={(e) => setInputPosition(e.target.value)}/>\r\n                    <input type='button' className={'button'} onClick={setPosition} value={'Изменить'}/>\r\n                </div>\r\n                {showRight &&\r\n                <img src={arrowRight} alt=\"\" className={'buttonRight'} onClick={rightSlide}/>\r\n                }\r\n\r\n                <span style={{color: \"red\", display: \"block\"}}>{error ? error : <br/>}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Slider;","import React from 'react';\r\n\r\nconst style = {\r\n    width: 100,\r\n    height: 100,\r\n    background: \"Yellow\",\r\n    color: \"black\",\r\n    verticalAlign: 'middle',\r\n    minHeight: '10em',\r\n    display: 'table-cell',\r\n};\r\n\r\nconst Square = ({id}) => {\r\n    return (\r\n        <div style={style}>\r\n            <p>{id}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Square;","import React from 'react';\r\nimport s from './SliderItem.module.css'\r\n\r\nconst SliderItem = ({onTouchStart, onTouchEnd, children}) => {\r\n    return (\r\n        <div className={s.slideItem} onTouchStart={onTouchStart} onTouchEnd={onTouchEnd}>\r\n            {children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SliderItem;","import React, {Fragment, useState} from 'react';\nimport './App.css';\nimport Slider from \"./components/slider/Slider\";\nimport Square from \"./components/exampleElement/Square\";\nimport SliderItem from \"./components/slider/sliderItem/SliderItem\";\n\nconst App = () => {\n\n    const [value, setValue] = useState(true);\n\n\n    const arr = [1, 2, 3, 4, 5, 6];\n    const squares = arr.map(i => <SliderItem key={i}> <Square id={i}/> </SliderItem>);\n\n    return (\n        <Fragment>\n            <div style={{margin: '20px 0  0 20px'}}>\n                <input type=\"checkbox\" checked={value} onChange={() => setValue(!value)}/> Бесконечно\n            </div>\n            <div style={{marginTop: 10}}>\n                <Slider infinite={value}>\n                    {squares}\n                </Slider>\n            </div>\n        </Fragment>\n\n\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}